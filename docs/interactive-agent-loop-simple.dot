digraph SimpleInteractiveFlow {
    rankdir=TB;
    graph [fontname="Arial", fontsize=14, bgcolor="white", pad=0.5];
    node [shape=box, style="rounded,filled", fontname="Arial", fontsize=12, width=3, height=0.8];
    edge [fontname="Arial", fontsize=11, penwidth=2];

    // Title
    title [label="Interactive Agent Loop Flow", shape=none, fontsize=18, fontweight=bold];
    
    // User input section
    user_input [label="👤 User Types Command\n(e.g., 'gather wood')", fillcolor="#e6f2ff", height=1];
    
    // Queue section
    queue_add [label="📥 Add to Queue\ntask.command_queue.append()", fillcolor="#ffe6e6"];
    
    // Background processor
    processor [label="🔄 Background Processor\n(checks every 0.5 seconds)", fillcolor="#e6ffe6", shape=hexagon];
    
    // Processing steps
    process_cmd [label="⚙️ Process Command\n1. Set task.processing = true\n2. Get command from queue", fillcolor="#f0f0f0"];
    
    // Agent execution
    agents [label="🤖 Run Agents\nCoordinator → Gatherer/Crafter", fillcolor="#f0e6ff"];
    
    // Minecraft actions
    minecraft [label="🎮 Execute in Minecraft\nvia Mineflayer Bot", fillcolor="#fffacd"];
    
    // State update
    update [label="💾 Update Session State\n• minecraft.inventory\n• task.gather.result\n• task.processing = false", fillcolor="#e6ffe6"];
    
    // Display result
    display [label="📤 Display Result to User", fillcolor="#e6f2ff"];
    
    // Flow connections
    title -> user_input [style=invis];
    user_input -> queue_add [label="Command entered"];
    queue_add -> processor [label="Triggers", style=dotted, color="gray"];
    processor -> process_cmd [label="If queue not empty"];
    process_cmd -> agents;
    agents -> minecraft;
    minecraft -> update;
    update -> display;
    display -> processor [label="Continue loop", style=dotted, color="gray", constraint=false];
    
    // Side elements
    status_check [label="📊 'status' command\nshows queue state", fillcolor="#fff0e6", width=2.5];
    user_input -> status_check [label="If 'status'", style=dashed, constraint=false];
    
    session [label="🗄️ Persistent Session\nStores all state between commands", 
             shape=note, 
             fillcolor="#f0fff0",
             width=3.5];
    
    // Position elements
    {rank=same; queue_add; session;}
    queue_add -> session [dir=none, style=dotted, color="darkgreen", label="Updates"];
    update -> session [dir=none, style=dotted, color="darkgreen", label="Updates"];
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        fillcolor="#f9f9f9";
        
        leg1 [label="Solid: Main flow", shape=none, width=2];
        leg2 [label="Dotted: Background/async", shape=none, width=2];
        leg3 [label="Dashed: Alternative path", shape=none, width=2];
    }
}