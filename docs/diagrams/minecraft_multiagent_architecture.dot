digraph MinecraftMultiAgentArchitecture {
    rankdir=TB;
    compound=true;
    node [shape=box, style="rounded,filled"];
    edge [fontsize=10];

    // Title
    labelloc="t";
    label="Multi-Agent Minecraft System Architecture\n2-3 Agents MVP with Expandable Design";
    fontsize=20;

    // Style definitions
    node [fontname="Arial"];
    edge [fontname="Arial"];

    // ADK Layer (Python)
    subgraph cluster_adk {
        label="Google ADK Layer (Python)";
        style=filled;
        fillcolor="#FFE5E5";
        node [fillcolor="#FF9999"];

        // Coordinator Agent
        coordinator [label="Coordinator Agent\n(LlmAgent)\n• Task Assignment\n• Progress Monitoring\n• Inter-agent Communication", shape=box3d];

        // Resource Gatherer Agent
        gatherer [label="Resource Gatherer\n(LlmAgent)\n• Find Resources\n• Collect Materials\n• Inventory Management", shape=box3d];

        // Builder Agent
        builder [label="Builder Agent\n(LlmAgent)\n• Structure Planning\n• Block Placement\n• Blueprint Execution", shape=box3d];

        // ADK Core Components
        subgraph cluster_adk_core {
            label="ADK Core Components";
            style=dashed;
            fillcolor="#FFCCCC";

            session_mgr [label="Session Manager\n• State Persistence\n• Agent Context"];
            tool_system [label="Tool System\n• Mineflayer Commands\n• State Tools\n• Monitoring Tools"];
            artifact_store [label="Artifact Storage\n• World State\n• Blueprints\n• Task Queue"];
        }
    }

    // Bridge Layer
    subgraph cluster_bridge {
        label="JSPyBridge Layer";
        style=filled;
        fillcolor="#FFFACD";
        node [fillcolor="#FFD700"];

        bridge_core [label="JSPyBridge Core\n• Async Communication\n• Object Proxying\n• Garbage Collection", shape=hexagon];

        // Communication components
        subgraph cluster_comm {
            label="Communication Protocol";
            style=dotted;

            cmd_queue [label="Command Queue\n• Action Batching\n• Priority Handling"];
            event_stream [label="Event Stream\n• World Updates\n• Bot Status\n• Errors"];
            state_sync [label="State Synchronizer\n• World Model\n• Inventory\n• Player Position"];
        }
    }

    // Mineflayer Layer (JavaScript)
    subgraph cluster_mineflayer {
        label="Mineflayer Layer (JavaScript)";
        style=filled;
        fillcolor="#E5FFE5";
        node [fillcolor="#99FF99"];

        // Bot instances
        bot1 [label="Bot Instance 1\n• Movement Control\n• Block Interaction\n• Entity Tracking", shape=component];
        bot2 [label="Bot Instance 2\n(Future Expansion)", shape=component, style="rounded,filled,dashed"];
        bot3 [label="Bot Instance 3\n(Future Expansion)", shape=component, style="rounded,filled,dashed"];

        // Mineflayer components
        subgraph cluster_mf_core {
            label="Mineflayer Core";
            style=dotted;

            pathfinder [label="Pathfinder Plugin\n• A* Navigation\n• Obstacle Avoidance"];
            physics [label="Physics Engine\n• Movement\n• Collision"];
            inventory [label="Inventory API\n• Item Management\n• Crafting"];
            world [label="World API\n• Block Data\n• Entity Data"];
        }
    }

    // External Systems
    subgraph cluster_external {
        label="External Systems";
        style=filled;
        fillcolor="#E5E5FF";
        node [fillcolor="#9999FF"];

        minecraft_server [label="Minecraft Server\n• Game State\n• Protocol Handler", shape=cylinder];

        redis [label="Redis/SQLite\n• Shared World Model\n• Task Queue\n• Agent Memory", shape=cylinder];

        monitoring [label="Monitoring Dashboard\n• Agent Status\n• Performance Metrics\n• Debug UI", shape=tab];
    }

    // Risk Mitigation Components
    subgraph cluster_risk {
        label="Risk Mitigation";
        style=filled;
        fillcolor="#FFE5F0";
        node [fillcolor="#FFB6C1"];

        circuit_breaker [label="Circuit Breaker\n• Failure Detection\n• Auto Recovery"];
        rate_limiter [label="Rate Limiter\n• Command Throttling\n• Server Protection"];
        dlq [label="Dead Letter Queue\n• Failed Commands\n• Retry Logic"];
    }

    // Connections - ADK Internal
    coordinator -> gatherer [label="Delegate Task", style=dashed];
    coordinator -> builder [label="Delegate Task", style=dashed];
    gatherer -> coordinator [label="Status Update", style=dashed];
    builder -> coordinator [label="Status Update", style=dashed];

    coordinator -> session_mgr;
    gatherer -> session_mgr;
    builder -> session_mgr;

    coordinator -> tool_system;
    gatherer -> tool_system;
    builder -> tool_system;

    session_mgr -> artifact_store;

    // Connections - Bridge
    tool_system -> bridge_core [label="Tool Calls", color=red, style=bold];
    bridge_core -> cmd_queue;
    event_stream -> bridge_core;
    state_sync -> bridge_core;

    bridge_core -> tool_system [label="Tool Results", color=blue, style=bold];

    // Connections - Mineflayer
    cmd_queue -> bot1 [label="Execute Commands"];
    bot1 -> event_stream [label="Game Events"];
    bot1 -> state_sync [label="State Updates"];

    bot1 -> pathfinder;
    bot1 -> physics;
    bot1 -> inventory;
    bot1 -> world;

    // External connections
    bot1 -> minecraft_server [label="Protocol", dir=both, style=dashed];

    state_sync -> redis [label="Persist State"];
    artifact_store -> redis [label="Store/Retrieve"];

    event_stream -> monitoring;
    circuit_breaker -> bridge_core;
    rate_limiter -> cmd_queue;
    dlq -> cmd_queue [style=dashed];

    // Future expansion paths
    bot2 -> minecraft_server [style=dashed, color=gray];
    bot3 -> minecraft_server [style=dashed, color=gray];

    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=dotted;
        node [shape=plaintext, fillcolor=white];

        legend1 [label="Solid lines = Active data flow"];
        legend2 [label="Dashed lines = Control flow/Future"];
        legend3 [label="Red = Python->JS commands"];
        legend4 [label="Blue = JS->Python results"];
    }
}
