digraph MinecraftDataFlow {
    rankdir=LR;
    node [shape=box, style="rounded,filled", fontname="Arial"];
    edge [fontname="Arial", fontsize=10];
    
    // Title
    labelloc="t";
    label="Multi-Agent Minecraft System - Data Flow";
    fontsize=18;
    
    // Define node groups with different colors
    
    // User/External
    user [label="User\nRequest", shape=ellipse, fillcolor="#E0E0E0"];
    
    // ADK Agents
    coordinator [label="Coordinator\nAgent", fillcolor="#FF9999"];
    worker_agent [label="Worker Agent\n(Gatherer/Builder)", fillcolor="#FF9999"];
    
    // ADK Components
    adk_tools [label="ADK Tool\nSystem", fillcolor="#FFCCCC"];
    session_state [label="Session\nState", shape=cylinder, fillcolor="#FFCCCC"];
    
    // Bridge Components
    jspy_bridge [label="JSPyBridge\nCore", shape=hexagon, fillcolor="#FFD700"];
    cmd_queue [label="Command\nQueue", fillcolor="#FFFACD"];
    event_stream [label="Event\nStream", fillcolor="#FFFACD"];
    
    // Mineflayer Components
    mineflayer_bot [label="Mineflayer\nBot", shape=component, fillcolor="#99FF99"];
    game_actions [label="Game\nActions", fillcolor="#CCFFCC"];
    
    // External
    minecraft_server [label="Minecraft\nServer", shape=cylinder, fillcolor="#9999FF"];
    shared_db [label="Redis/SQLite\nShared State", shape=cylinder, fillcolor="#9999FF"];
    
    // Data flow paths
    
    // 1. Task Assignment Flow
    user -> coordinator [label="1. Request\n'Build shelter'", color="darkgreen", style=bold];
    coordinator -> session_state [label="2. Check\nresources"];
    coordinator -> worker_agent [label="3. Delegate\ntask", style=dashed];
    
    // 2. Command Execution Flow
    worker_agent -> adk_tools [label="4. Call tool\n'move_to(x,y,z)'"];
    adk_tools -> jspy_bridge [label="5. Serialize\ncommand", color="red", style=bold];
    jspy_bridge -> cmd_queue [label="6. Queue\ncommand"];
    cmd_queue -> mineflayer_bot [label="7. Execute\ncommand"];
    mineflayer_bot -> game_actions [label="8. Perform\naction"];
    game_actions -> minecraft_server [label="9. Game\nprotocol", style=dashed];
    
    // 3. State Update Flow
    minecraft_server -> mineflayer_bot [label="10. World\nupdate", style=dashed];
    mineflayer_bot -> event_stream [label="11. Emit\nevent"];
    event_stream -> jspy_bridge [label="12. Stream\nevent"];
    jspy_bridge -> adk_tools [label="13. Update\nresult", color="blue", style=bold];
    adk_tools -> worker_agent [label="14. Tool\nresponse"];
    
    // 4. Persistence Flow
    worker_agent -> session_state [label="15. Update\nstate"];
    session_state -> shared_db [label="16. Persist", style=dotted];
    event_stream -> shared_db [label="Cache\nworld data", style=dotted];
    
    // 5. Monitoring Flow
    coordinator -> user [label="17. Status\nupdate", color="darkgreen"];
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=dotted;
        node [shape=plaintext, fillcolor=white];
        
        legend_title [label="Flow Types:", fontsize=12, fontweight=bold];
        legend1 [label="Green = User interaction"];
        legend2 [label="Red = Pythonâ†’JS commands"];
        legend3 [label="Blue = JSâ†’Python results"];
        legend4 [label="Dotted = Persistence"];
        legend5 [label="Dashed = External/Async"];
    }
    
    // Timing annotations
    {
        node [shape=plaintext, fillcolor=white, fontsize=10];
        timing1 [label="~50ms"];
        timing2 [label="~10ms"];
        timing3 [label="~100ms"];
    }
    
    // Position timing labels
    timing1 -> jspy_bridge [style=invis];
    timing2 -> cmd_queue [style=invis];
    timing3 -> minecraft_server [style=invis];
}